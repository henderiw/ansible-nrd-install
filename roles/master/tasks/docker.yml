---
- name: pull docker images from registry
  command: docker image pull {{ bootstrap_server_ip}}:5000/{{ item.name }}:{{item.version}}
  with_items:
    - { name: "nrd", version: "NRD_11_0_R5" }
    - { name: "nrddb", version: "NRDDB_11_0_R5" }
    - { name: "collectd", version: "5.8.1-1--NRD_11_0_R5" }
    - { name: "bitnami/mariadb", version: "10.3.15-debian-9-r31" }
    - { name: "prom/mysqld-exporter", version: "v0.10.0" }

- name: copy cli yaml file to /tmp
  template:
    src: "{{ item }}.j2"
    dest: "/tmp/{{ item }}"
    mode: "0755"
  with_items:
    - cli
  #delegate_to: "{{ inventory_hostname }}"

- name: copy cli yaml file to /usr/local/bin/cli
  become: true
  copy:
    src: /tmp/cli
    dest: /usr/local/bin/cli
    mode: "0755"
    remote_src: yes

- name: Create a random nrf directory 
  file:
    path: /tmp/nrd_{{ random_number }}
    state: directory
    mode: 0777
  register: result

- name: debug directory output
  debug:
    var: result.path
    verbosity: 5

- name: Touch a file
  file:
    path: "{{ result.path }}/nrf.json"
    state: touch
    mode: 0777

- name: create dummy docker container
  command: docker create -ti --name dummy {{ bootstrap_server_ip}}:5000/nrd:{{ nrd_version}} bash

- name: copy nrf.json in tempfile
  command: docker cp dummy:/etc/sysconfig/nrf.json "{{ result.path }}/nrf.json"

- name: remove dummy docker container
  command: docker rm -fv dummy

- name: Create a random nrf directory 
  become: true
  file:
    path: /etc/sysconfig
    state: directory
    mode: 0755
  register: result

- name: Touch a file /etc/sysconfig/nrfKubernetes.json
  become: true
  file:
    path: /etc/sysconfig/nrfKubernetes.json
    state: touch
    mode: 0777

- name: Touch a file /etc/sysconfig/nrfKubernetes_version.json
  become: true
  file:
    path: /etc/sysconfig/nrfKubernetes_version.json
    state: touch
    mode: 0777

- name: create nrd namespace in k8s
  command: kubectl create namespace nrd
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: create nrd-management namespace in k8s
  command: kubectl create namespace nrd-management
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: create nrd-database namespace in k8s
  command: kubectl create namespace nrd-database
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: update nrd namespace with istio in k8s
  command: kubectl label namespace nrd istio-injection=enabled
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already' not in res.stderr"

- name: create configmap
  command: kubectl create configmap nrf --from-file="{{ result.path }}/nrf.json" -n nrd
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: create configmap
  command: kubectl create configmap nrdplatformcfg --from-file=/etc/sysconfig/nrfKubernetes.json -n default
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: create configmap
  command: kubectl create configmap imageversion --from-file=/etc/sysconfig/nrfKubernetes_version.json -n default
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"

- name: create configmap
  command: kubectl create configmap kpikci --from-literal=ci=15 --from-literal=ri=15 --from-literal=retention=7
  register: res
  changed_when: "'created' in res.stdout"
  failed_when: "res.rc != 0 and 'already exists' not in res.stderr"